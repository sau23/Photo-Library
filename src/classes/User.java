package classes;

import java.io.Serializable;

import java.io.IOException;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.ArrayList;

/**
 * User class defines the User object that appears on the list
 * in the admin screen. Holds a name, a pass, and an
 * extendable list of albums.
 * 
 * @author Samuel Uganiza
 *
 */
public class User implements Serializable{

	/**
	 * Autogenerated serial number.
	 */
	private static final long serialVersionUID = 7089640660698420983L;

	public static ArrayList<User> users;

	private static boolean DEBUG = true;

	private String name;
	private String pass;
	private ArrayList<Album> albums;

	/**
	 * User constructor. Takes name and pass, instantiates
	 * private list of albums to be empty.
	 * 
	 * @param name Name of user
	 * @param pass Chosen password
	 */

	public User(String name, String pass) {
		this.name = name;
		this.pass = pass;
		this.albums = new ArrayList<Album>();
	}

	/**
	 * Returns name of user.
	 * 
	 * @return name
	 */
	public String getName() {
		return this.name;
	}

	/**
	 * Returns pass of user.
	 * 
	 * @return pass
	 */
	public String getPass() {
		return this.pass;
	}

	/**
	 * Returns list of albums of user.
	 * 
	 * @return albums
	 */
	public ArrayList<Album> getAlbums(){
		return this.albums;
	}

	/**
	 * Creates a new user object to add to the list and updates the database.
	 * Prohibits adding same user name multiple times, case specific.
	 * Called when creating an instance through login add button and admin add button.
	 * 
	 * @param name The user name to add
	 * @param pass The user's chosen password
	 */
	public static void addUser(String name, String pass) {
		
		// check to see if user name already exists in the list
		for(User user : users) {
			if(name.equals(user.getName())) {
				return;
			}
		}
		users.add(new User(name, pass));
		User.writeToDatabase();
	}

	/**
	 * Searches database for the given user name and deletes it, updating the
	 * database after the removal.
	 * 
	 * @param name The user name to search for
	 */
	public static void deleteUser(String name) {
		
		// check if user name matches selected name
		for(User user : users) {
			if(name.equals(user.getName())) {
				users.remove(user);
				return;
			}
		}
	}

	/**
	 * Instantiates the user list from an existing user database ser file by
	 * deserializing the information from data.ser if it finds it.
	 */
	@SuppressWarnings("unchecked")
	public static void readFromDatabase() {
		try {
			ObjectInputStream in = new ObjectInputStream(new FileInputStream("data/data.ser"));
			Object data = in.readObject();
			if(data instanceof ArrayList<?>) {
				ArrayList<?> arr = (ArrayList<?>)data;
				if(!arr.isEmpty() && arr.get(0) instanceof User) {
					users = (ArrayList<User>)arr;
				}
			}
			in.close();
			if(DEBUG) System.out.println("Sucessfully read from database.");
		} catch (IOException e) {
			if(DEBUG) System.out.println("Database not found, creating new one.");
			// first time read, if not found then create a new file.
			users = new ArrayList<User>();
			writeToDatabase();
		} catch (ClassNotFoundException c) {
			if(DEBUG) System.out.println("ArrayList class not found");
			c.printStackTrace();
		}
	}

	/**
	 * Updates the user database text file by writing the current list into a
	 * ser file after every add.
	 */
	public static void writeToDatabase() {
		try{
			ObjectOutputStream out = new ObjectOutputStream(new FileOutputStream("data/data.ser"));
			out.writeObject(users);
			out.close();
			if(DEBUG) System.out.println("Success writing to database.");
		} catch(IOException e) {
			if(DEBUG) System.out.println("IO error.");
			e.printStackTrace();
		}
	}

	/**
	 * Checks to see if the given user name and corresponding password exists in the
	 * user database text file. Returns a user if it finds an exact match, and null 
	 * if it does not find any match.
	 * 
	 * @param name The user name to verify
	 * @param pass The password to verify
	 * @return A user object either with valid credentials or a null reference
	 */
	public static User verifyFromDatabase(String name, String pass) {
		
		User ret = null;
		
		return ret;
	}
}
