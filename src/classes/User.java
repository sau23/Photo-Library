package classes;

import java.io.File;
import java.io.Serializable;
import java.util.ArrayList;

/**
 * User class defines the User object that appears on the list
 * in the admin screen. Holds a name, a pass, and an extendable
 * list of albums. This class also holds a global list of Users
 * for reference in the AdminController class.
 * 
 * @author Nicholas Petriello
 * @author Samuel Uganiza
 */
public class User implements Serializable{

	/**
	 * Autogenerated serial number.
	 */
	private static final long serialVersionUID = 7089640660698420983L;

	/**
	 * User object's username, password, and list of different albums.
	 */
	private String name;
	private String pass;
	private ArrayList<Album> albums;
	
	/**
	 * List of photo references for this user.
	 */
	private ArrayList<Photo> photosPool;

	/**
	 * User constructor. Takes name and pass, instantiates
	 * private list of albums to be empty.
	 * 
	 * @param name Name of user
	 * @param pass Chosen password
	 */
	public User(String name, String pass) {
		this.name = name;
		this.pass = pass;
		this.albums = new ArrayList<Album>();
		this.photosPool = new ArrayList<Photo>();
	}

	/**
	 * toString override to print username and password of selected user
	 * 
	 * @return String containing user's username and password
	 */
	@Override
	public String toString() {
		return this.name + " " + this.pass;
	}
	
	/**
	 * Returns user name of user.
	 * 
	 * @return name
	 */
	public String getName() {
		return this.name;
	}

	/**
	 * Returns password of user.
	 * 
	 * @return pass
	 */
	public String getPass() {
		return this.pass;
	}

	/**
	 * Returns list of albums of user.
	 * 
	 * @return albums
	 */
	public ArrayList<Album> getAlbums(){
		return this.albums;
	}
	
	/**
	 * Returns list of photos used in all albums of this user.
	 * 
	 * @return
	 */
	public ArrayList<Photo> getPhotosPool(){
		return this.photosPool;
	}
	
	// TODO: Review check in photos
	/**
	 * Attempts to add a photo to the master photo list. If it finds a duplicate by file
	 * path, simple add the photo to the given album. Otherwise, add the given photo to
	 * the master list before adding it to the given album.
	 * 
	 * @param photo The photo to add
	 * @param album The album to add the photo to
	 */
	public void checkInPhotos(Photo photo, Album album) {
		
		// check for duplicates
		for(int i = 0; i < this.photosPool.size(); i++) {
			
			if(this.photosPool.get(i).getFilePath().equals(photo.getFilePath())) {
				if(UserList.DEBUG) System.out.println(photo.toString() + " found in " + this.getName() + "'s pool");
				album.addPhoto(photo);
				return;
			}
			
		}
		// otherwise add it
		this.photosPool.add(photo);
		album.addPhoto(photo);
		if(UserList.DEBUG) System.out.println("Adding " + photo.toString() + " to " + this.getName() + "'s pool");
		
	}
	
	/**
	 * Attempts to delete a photo from the master photo list. If it finds that another
	 * album still keeps a reference to this photo, the photo will not be removed.
	 * Otherwise, if it is the only album to contain the photo, the photo will then be
	 * deleted from the master photo list.
	 * 
	 * @param photo Photo to be deleted from 
	 */
	public void deletePhoto(Photo photo) {
		
		// check all albums in this user to see if any more albums have same reference to photo
		int i = 0;
		for(Album a : this.albums) {
			
			for(Photo p : a.getPhotos()) {
				
				if(p.getFilePath().equals(photo.getFilePath())) {
					i++;
				}
				
			}
			
		}
		
		// if it not found anywhere else, delete it
		if(i > 1) {
			if(UserList.DEBUG) System.out.println("File found in other albums, did not delete from pool.");
		} else {
			this.photosPool.remove(photo);
			if(UserList.DEBUG) System.out.println("Deleted " + photo.toString() + " from " + this.getName() + "'s pool.");
		}
		
	}

	/**
	 * Checks the photos pool of the given user to see if all the file references
	 * contained in the list exists. If a photo does not exist at its given file
	 * path, delete it from all albums then update the user's .ser file.
	 * 
	 * @param index
	 */
	public ArrayList<String> checkPhotosPool() {
		
		ArrayList<String> ret = new ArrayList<String>();
		ArrayList<Photo> toRemove = new ArrayList<Photo>();
		File f;
		
		//Check photo pool
		for(Photo p : this.photosPool) {
			
			//create instance of target photo
			f = new File(p.getFilePath());
			if(!f.exists()) {
				for(Album a : this.albums) {
					a.removePhoto(p);
				}
				toRemove.add(p);
			}
			
		}
		
		//Check albums for instance and remove
		for(Photo p : toRemove) {
			
			for(Album a : this.albums) {
				a.removePhoto(p);
			}
			deletePhoto(p);
			ret.add(p.getFilePath());
			
		}
		UserList.writeToUserDatabase(this);
		return ret;
		
	}
	
}
